import { LitElement, html } from 'lit';
import { state, property } from 'lit/decorators.js';
import { ActionHash, Record, DnaHash, AgentPubKey, EntryHash } from '@holochain/client';
import { EntryRecord } from '@holochain-open-dev/utils';
import { hashProperty, hashState, sharedStyles } from '@holochain-open-dev/elements';
import { consume } from '@lit-labs/context';
import { Snackbar, MdFilledButton, Card } from '@scoped-elements/material-web';
import { ScopedElementsMixin } from '@open-wc/scoped-elements';
import { localized, msg } from '@lit/localize';

{{#uniq_lines}}
  {{#each entry_type.fields}}
    {{#if widget}}
{{> (concat field_type.type "/" widget "/edit/imports") }}

    {{/if}}
  {{/each}}
{{/uniq_lines}}

import { {{pascal_case coordinator_zome_manifest.name}}Store } from '../{{kebab_case coordinator_zome_manifest.name}}-store';
import { {{camel_case coordinator_zome_manifest.name}}StoreContext } from '../context';
import { {{pascal_case entry_type.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from '../types';

/**
 * @element create-{{kebab_case entry_type.name}}
 * @fires {{kebab_case entry_type.name}}-created: detail will contain { {{camel_case entry_type.name}}Hash }
 */
@localized()
export class Create{{pascal_case entry_type.name}} extends ScopedElementsMixin(LitElement) {
  {{#each entry_type.fields}}
    {{#if (not widget) }}
      {{#if (not (eq cardinality "vector" ) )}}
  // REQUIRED. The {{lower_case field_name}} for this {{pascal_case ../entry_type.name}}
  @property({{#if (or (eq field_type.type "AgentPubKey") (or (eq field_type.type "ActionHash") (eq field_type.type "EntryHash" ) ) ) }}hashProperty('{{kebab_case field_name}}'){{/if}})
  {{camel_case field_name}}!: {{> (concat field_type.type "/type") }};

      {{else}}
  // REQUIRED. The {{plural (lower_case field_name)}} for this {{pascal_case ../entry_type.name}}
  @property()
  {{camel_case field_name}}!: Array<{{> (concat field_type.type "/type") }}>;

      {{/if}}
    {{/if}}
  {{/each}}

  {{#each entry_type.fields}}
    {{#if widget }}
      {{#if (ne cardinality "vector") }}
  /**
   * @internal
   */
  @state({{#if (or (eq field_type.type "AgentPubKey") (or (eq field_type.type "ActionHash") (eq field_type.type "EntryHash" ) ) ) }}hashState(){{/if}})
  _{{camel_case field_name}}: {{> (concat field_type.type "/type") }}{{#if (or (eq field_type.type "AgentPubKey") (or (eq field_type.type "ActionHash") (or (eq field_type.type "EntryHash") (eq cardinality "option") ) ) ) }} | undefined{{/if}} = {{> (concat field_type.type "/" widget "/initial-value") field_type=field_type}};

      {{else}}
  /**
   * @internal
   */
  @state()
  _{{camel_case field_name}}: Array<{{> (concat field_type.type "/type") }}> = [{{> (concat field_type.type "/" widget "/initial-value") field_type=field_type}}];

      {{/if}}
    {{/if}}
  {{/each}}

  firstUpdated() {
{{#each entry_type.fields}}
  {{#if (not widget) }}
    {{#if (ne cardinality "option")}}
    if (this.{{camel_case field_name}} === undefined) {
      throw new Error(`The {{camel_case field_name}} input is required for the create-{{kebab_case ../entry_type.name}} element`);
    }
    {{/if}}
  {{/if}}
{{/each}}
  }

  is{{pascal_case entry_type.name}}Valid() {
    return true{{#each entry_type.fields}}{{#if widget}}{{#if (eq cardinality "single")}} && {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate=(concat "this._" (camel_case field_name)) }}{{/if}}{{#if (eq cardinality "vector")}} && this._{{camel_case field_name}}.every(e => {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate="e" }}){{/if}}{{/if}}{{/each}};
  }

  /**
   * @internal
   */
  @consume({ context: {{camel_case coordinator_zome_manifest.name}}StoreContext, subscribe: true })
  {{camel_case coordinator_zome_manifest.name}}Store!: {{pascal_case coordinator_zome_manifest.name}}Store;

  async create{{pascal_case entry_type.name}}() {
    const {{camel_case entry_type.name}}: {{pascal_case entry_type.name}} = { 
    {{#each entry_type.fields}}
      {{#if widget}}
        {{snake_case field_name}}: this._{{camel_case field_name}}!,
      {{else}}
        {{snake_case field_name}}: this.{{camel_case field_name}},
      {{/if}}
    {{/each}}
    };

    try {
      const record: EntryRecord<{{pascal_case entry_type.name}}> = await this.{{camel_case coordinator_zome_manifest.name}}Store.client.create{{pascal_case entry_type.name}}({{camel_case entry_type.name}});

      this.dispatchEvent(new CustomEvent('{{kebab_case entry_type.name}}-created', {
        composed: true,
        bubbles: true,
        detail: {
          {{camel_case entry_type.name}}Hash: record.actionHash
        }
      }));
    } catch (e: any) {
      const errorSnackbar = this.shadowRoot?.getElementById('create-error') as Snackbar;
      errorSnackbar.labelText = `${msg("Error creating the {{lower_case entry_type.name}}")}: ${e.data.data}`;
      errorSnackbar.show();
    }
  }

  render() {
    return html`
      <mwc-snackbar id="create-error" leading>
      </mwc-snackbar>

      <mwc-card style="display: flex; flex: 1;">
        <div style="display: flex; flex: 1; flex-direction: column; margin: 16px">
          <span style="font-size: 18px; margin-bottom: 16px;">${msg("Create {{title_case entry_type.name}}")}</span>
  
          {{#each entry_type.fields}}
            {{#if widget}}
          <div style="margin-bottom: 16px;">
              {{#if (not (eq cardinality "vector") )}}
          {{> (concat field_type.type "/" widget "/edit/render") label=(title_case field_name) variable_to_read=(concat "this._" (camel_case field_name) ) variable_to_change=(concat "this._" (camel_case field_name) ) }}
              {{else}}
          {{> Vec/edit/render field_name=field_name field_type=field_type widget=widget }}
              {{/if}}
          </div>
              
            {{/if}}
          {{/each}}

          <md-filled-button 
            .label=${msg("Create {{title_case entry_type.name}}")}
            .disabled=${!this.is{{pascal_case entry_type.name}}Valid()}
            @click=${() => this.create{{pascal_case entry_type.name}}()}
          ></md-filled-button>
        </div> 
      </mwc-card>`;
  }
  
  static get scopedElements() {
    return {
      'mwc-snackbar': Snackbar,
      'md-filled-button': MdFilledButton,
      'mwc-card': Card,
      {{#uniq_lines}}
        {{#each entry_type.fields}}
          {{#if widget}}
      {{> (concat field_type.type "/" widget "/edit/scoped-elements") }}

          {{/if}}
        {{/each}}
      {{/uniq_lines}}
    };
  }
  
  static styles = [sharedStyles];
}
