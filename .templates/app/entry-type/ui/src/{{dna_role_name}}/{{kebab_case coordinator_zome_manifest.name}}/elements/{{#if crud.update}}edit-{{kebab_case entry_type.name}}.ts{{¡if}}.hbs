import { LitElement, html } from 'lit';
import { state, customElement, property } from 'lit/decorators.js';
import { ActionHash, Record, EntryHash, AgentPubKey } from '@holochain/client';
import { EntryRecord } from '@holochain-open-dev/utils';
import { hashState, sharedStyles, hashProperty } from '@holochain-open-dev/elements';
import { consume } from '@lit-labs/context';
import { MdFilledButton, MdOutlinedButton, Snackbar } from '@scoped-elements/material-web';
import { ScopedElementsMixin } from '@open-wc/scoped-elements';
import { localized, msg } from '@lit/localize';

{{#uniq_lines}}
  {{#each entry_type.fields}}
    {{#if widget}}
{{> (concat field_type.type "/" widget "/edit/imports") }}

    {{/if}}
  {{/each}}
{{/uniq_lines}}

import { {{pascal_case coordinator_zome_manifest.name}}Store } from '../{{kebab_case coordinator_zome_manifest.name}}-store';
import { {{camel_case coordinator_zome_manifest.name}}StoreContext } from '../context';
import { {{pascal_case entry_type.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from '../types';

/**
 * @element edit-{{kebab_case entry_type.name}}
 * @fires {{kebab_case entry_type.name}}-updated: detail will contain { {{#if link_from_original_to_each_update}}original{{pascal_case entry_type.name}}Hash, {{/if}}previous{{pascal_case entry_type.name}}Hash, updated{{pascal_case entry_type.name}}Hash }
 */
@localized()
export class Edit{{pascal_case entry_type.name}} extends ScopedElementsMixin(LitElement) {

{{#if link_from_original_to_each_update}}
  // REQUIRED. The hash of the original `Create` action for this {{pascal_case entry_type.name}}
  @property(hashProperty('original-{{kebab_case entry_type.name}}-hash'))
  original{{pascal_case entry_type.name}}Hash!: ActionHash;
{{/if}}
  
  // REQUIRED. The current {{pascal_case entry_type.name}} record that should be updated
  @property()
  currentRecord!: EntryRecord<{{pascal_case entry_type.name}}>;
  
  /**
   * @internal
   */
  @consume({ context: {{camel_case coordinator_zome_manifest.name}}StoreContext })
  {{camel_case coordinator_zome_manifest.name}}Store!: {{pascal_case coordinator_zome_manifest.name}}Store;
 
  {{#each entry_type.fields}}
    {{#if widget }}
      {{#if (not (eq cardinality "vector" ) )}}
  /**
   * @internal
   */
  @state({{#if (or (eq field_type.type "AgentPubKey") (or (eq field_type.type "ActionHash") (eq field_type.type "EntryHash" ) ) ) }}hashState(){{/if}})
  _{{camel_case field_name}}{{#if (eq cardinality "single" )}}!{{/if}}: {{> (concat field_type.type "/type") }}{{#if (eq cardinality "option" )}} | undefined{{/if}};

      {{else}}
  /**
   * @internal
   */
  @state()
  _{{camel_case field_name}}: Array<{{> (concat field_type.type "/type") }}>;

      {{/if}}
    {{/if}}
  {{/each}}
  
  connectedCallback() {
    super.connectedCallback();
    if (this.currentRecord === undefined) {
      throw new Error(`The currentRecord property is required for the edit-{{kebab_case entry_type.name}} element`);
    }
{{#if link_from_original_to_each_update}}

    if (this.original{{pascal_case entry_type.name}}Hash === undefined) {
      throw new Error(`The original{{pascal_case entry_type.name}}Hash property is required for the edit-{{kebab_case entry_type.name}} element`);
    }
{{/if}}

  {{#each entry_type.fields}}
    {{#if widget }}
    this._{{camel_case field_name}} = this.currentRecord.entry.{{snake_case field_name}};
    {{/if}}
  {{/each}}
  }

  is{{pascal_case entry_type.name}}Valid() {
    return true{{#each entry_type.fields}}{{#if widget}}{{#if (eq cardinality "single")}} && {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate=(concat "this._" (camel_case field_name)) }}{{/if}}{{#if (eq cardinality "vector")}} && this._{{camel_case field_name}}.every(e => {{> (concat field_type.type "/" widget "/is-valid") variable_to_validate="e" }}){{/if}}{{/if}}{{/each}};
  }

  async update{{pascal_case entry_type.name}}() {
    const {{camel_case entry_type.name}}: {{pascal_case entry_type.name}} = { 
    {{#each entry_type.fields}}
      {{#if widget}}
      {{snake_case field_name}}: this._{{camel_case field_name}},
      {{else}}
      {{snake_case field_name}}: this.currentRecord.entry.{{snake_case field_name}},
      {{/if}}
    {{/each}}
    };

    try {
      const updateRecord = await this.{{camel_case coordinator_zome_manifest.name}}Store.client.update{{pascal_case entry_type.name}}(
  {{#if link_from_original_to_each_update}}
        this.original{{pascal_case entry_type.name}}Hash,
  {{/if}}
        this.currentRecord.actionHash,
        {{camel_case entry_type.name}}
      );
  
      this.dispatchEvent(new CustomEvent('{{kebab_case entry_type.name}}-updated', {
        composed: true,
        bubbles: true,
        detail: {
{{#if link_from_original_to_each_update}}
          original{{pascal_case entry_type.name}}Hash: this.original{{pascal_case entry_type.name}}Hash,
{{/if}}
          previous{{pascal_case entry_type.name}}Hash: this.currentRecord.actionHash,
          updated{{pascal_case entry_type.name}}Hash: updateRecord.actionHash
        }
      }));
    } catch (e: any) {
      const errorSnackbar = this.shadowRoot?.getElementById('update-error') as Snackbar;
      errorSnackbar.labelText = `${msg("Error updating the {{lower_case entry_type.name}}")}: ${e.data.data}`;
      errorSnackbar.show();
    }
  }

  render() {
    return html`
      <mwc-snackbar id="update-error" leading>
      </mwc-snackbar>

      <div style="display: flex; flex-direction: column">
        <span style="font-size: 18px">${msg("Edit {{title_case entry_type.name}}")}</span>
        {{#each entry_type.fields}}
          {{#if widget}}
        <div style="margin-bottom: 16px">
            {{#if (not (eq cardinality "vector") )}}
        {{> (concat field_type.type "/" widget "/edit/render") label=(title_case field_name) edit=true variable_to_read=(concat "this._" (camel_case field_name) ) variable_to_change=(concat "this._" (camel_case field_name) ) }}
            {{else}}
        {{> Vec/edit/render edit=true field_name=field_name field_type=field_type widget=widget }}
            {{/if}}
        </div>

          {{/if}}
        {{/each}}


        <div style="display: flex; flex-direction: row">
          <md-outlined-button
            .label=${msg("Cancel")}
            @click=${() => this.dispatchEvent(new CustomEvent('edit-canceled', {
              bubbles: true,
              composed: true
            }))}
            style="flex: 1;"
          ></md-button>
          <md-filled-button 
            .label=${msg("Save")}
            .disabled=${!this.is{{pascal_case entry_type.name}}Valid()}
            @click=${() => this.update{{pascal_case entry_type.name}}()}
            style="flex: 1;"
          ></md-filled-button>
        </div>
      </div>`;
  }
  
  static get scopedElements() {
    return {
      'mwc-snackbar': Snackbar,
      'md-filled-button': MdFilledButton,
      'md-outlined-button': MdOutlinedButton,
      {{#uniq_lines}}
        {{#each entry_type.fields}}
          {{#if widget}}
      {{> (concat field_type.type "/" widget "/edit/scoped-elements") }}
      
          {{/if}}
        {{/each}}
      {{/uniq_lines}}
    };
  }

  static styles = [sharedStyles];
}
