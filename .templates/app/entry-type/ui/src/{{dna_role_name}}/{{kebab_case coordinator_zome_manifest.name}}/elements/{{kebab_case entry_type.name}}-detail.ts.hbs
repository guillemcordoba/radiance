import { LitElement, html } from 'lit';
import { state, property } from 'lit/decorators.js';
import { EntryHash, Record, ActionHash } from '@holochain/client';
import { EntryRecord } from '@holochain-open-dev/utils';
import { StoreSubscriber } from '@holochain-open-dev/stores';
import { sharedStyles, hashProperty, DisplayError } from '@holochain-open-dev/elements';
import { consume } from '@lit-labs/context';
import { CircularProgress, Card, MdStandardIconButton, Snackbar } from '@scoped-elements/material-web';
import { ScopedElementsMixin } from '@open-wc/scoped-elements';
import { localized, msg } from '@lit/localize';

{{#uniq_lines}}
  {{#each entry_type.fields}}
    {{#if widget}}
{{> (concat field_type.type "/" widget "/detail/imports") }}

    {{/if}}
  {{/each}}
{{/uniq_lines}}

{{#if crud.update}}
import { Edit{{pascal_case entry_type.name}} } from './edit-{{kebab_case entry_type.name}}';
{{/if}}

import { {{pascal_case coordinator_zome_manifest.name}}Store } from '../{{kebab_case coordinator_zome_manifest.name}}-store';
import { {{camel_case coordinator_zome_manifest.name}}StoreContext } from '../context';
import { {{pascal_case entry_type.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from '../types';

/**
 * @element {{kebab_case entry_type.name}}-detail
 * @fires {{kebab_case entry_type.name}}-deleted: detail will contain { {{camel_case entry_type.name}}Hash }
 */
@localized()
export class {{pascal_case entry_type.name}}Detail extends ScopedElementsMixin(LitElement) {

  // REQUIRED. The hash of the {{pascal_case entry_type.name}} to show
  @property(hashProperty('{{kebab_case entry_type.name}}-hash'))
  {{camel_case entry_type.name}}Hash!: {{#if entry_type.reference_entry_hash}}EntryHash{{else}}ActionHash{{/if}};

  /**
   * @internal
   */
  @consume({ context: {{camel_case coordinator_zome_manifest.name}}StoreContext, subscribe: true })
  {{camel_case coordinator_zome_manifest.name}}Store!: {{pascal_case coordinator_zome_manifest.name}}Store;

  /**
   * @internal
   */
   _{{camel_case entry_type.name}} = new StoreSubscriber(this, () => this.{{camel_case coordinator_zome_manifest.name}}Store.{{camel_case (plural entry_type.name)}}.get(this.{{camel_case entry_type.name}}Hash));

  {{#if crud.update}}
  /**
   * @internal
   */
  @state()
  _editing = false;
  {{/if}}

  firstUpdated() {
    if (this.{{camel_case entry_type.name}}Hash === undefined) {
      throw new Error(`The {{camel_case entry_type.name}}Hash property is required for the {{kebab_case entry_type.name}}-detail element`);
    }
  }

  {{#if crud.delete}}
  async delete{{pascal_case entry_type.name}}() {
    try {
      await this.{{camel_case coordinator_zome_manifest.name}}Store.client.delete{{pascal_case entry_type.name}}(this.{{camel_case entry_type.name}}Hash);
 
      this.dispatchEvent(new CustomEvent('{{kebab_case entry_type.name}}-deleted', {
        bubbles: true,
        composed: true,
        detail: {
          {{camel_case entry_type.name}}Hash: this.{{camel_case entry_type.name}}Hash
        }
      }));
    } catch (e: any) {
      const errorSnackbar = this.shadowRoot?.getElementById('delete-error') as Snackbar;
      errorSnackbar.labelText = `${msg("Error deleting the {{lower_case entry_type.name}}")}: ${e.data.data}`;
      errorSnackbar.show();
    }
  }
  {{/if}}

  renderDetail(entryRecord: EntryRecord<{{pascal_case entry_type.name}}>) {
    return html`{{#if crud.delete}}
      <mwc-snackbar id="delete-error" leading>
      </mwc-snackbar>
      {{/if}}

      <div style="display: flex; flex-direction: column">
      	<div style="display: flex; flex-direction: row">
          <span style="font-size: 18px; flex: 1;">${msg("{{title_case entry_type.name}}")}</span>

          {{#if crud.update}}
          <md-standard-icon-button style="margin-left: 8px" icon="edit" @click=${() => { this._editing = true; } }></md-standard-icon-buttonbutton>
          {{/if}}
          {{#if crud.delete}}
          <md-standard-icon-button style="margin-left: 8px" icon="delete" @click=${() => this.delete{{pascal_case entry_type.name}}()}></md-standard-icon-button>
          {{/if}}
        </div>

	{{#each entry_type.fields}}
          {{#if widget}}	  
            {{#if (not (eq cardinality "vector") )}}
 	<div style="display: flex; flex-direction: row; margin-bottom: 16px">
	  <span style="margin-right: 4px"><strong>${msg("{{title_case field_name}}")}:</strong></span>
 	  <span style="white-space: pre-line">{{> (concat field_type.type "/" widget "/detail/render") variable_to_read=(concat "entryRecord.entry." (snake_case field_name) ) }}</span>
	</div>
            {{else}}
          {{> Vec/detail/render variable_to_read=(concat "entryRecord.entry." (snake_case field_name) ) field_name=field_name field_type=field_type widget=widget }}
            {{/if}}

 	  {{/if}}
	{{/each}}
      </div>
    `;
  }
  
  render{{pascal_case entry_type.name}}() {
    switch (this._{{camel_case entry_type.name}}.value.status) {
      case "pending":
        return html`<div
          style="display: flex; flex: 1; align-items: center; justify-content: center"
        >
          <mwc-circular-progress indeterminate></mwc-circular-progress>
        </div>`;
      case "complete":
        const {{camel_case entry_type.name}} = this._{{camel_case entry_type.name}}.value.value;
        
        if (!{{camel_case entry_type.name}}) return html`<span>${msg("The requested {{lower_case entry_type.name}} doesn't exist")}</span>`;
    
{{#if crud.update}}
        if (this._editing) {
    	  return html`<edit-{{kebab_case entry_type.name}}
  {{#if link_from_original_to_each_update}}
    	    .original{{pascal_case entry_type.name}}Hash=${this.{{camel_case entry_type.name}}Hash}
  {{/if}}
    	    .currentRecord=${ {{camel_case entry_type.name}} }
            @{{kebab_case entry_type.name}}-updated=${async () => { this._editing = false; } }
      	    @edit-canceled=${() => { this._editing = false; } }
    	    style="display: flex; flex: 1;"
    	  ></edit-{{kebab_case entry_type.name}}>`;
      }

{{/if}}
        return this.renderDetail({{camel_case entry_type.name}});
      case "error":
        return html`<display-error
          .headline=${msg("Error fetching the {{lower_case entry_type.name}}")}
          .error=${this._{{camel_case entry_type.name}}.value.error.data.data}
        ></display-error>`;
    }
  }
  
  render() {
    return html`<mwc-card style="display: flex; flex: 1;">
      <div style="margin: 16px">
        ${this.render{{pascal_case entry_type.name}}()}
      </div>
    </mwc-card>`;
  }
    
  static get scopedElements() {
    return {
      {{#if crud.update}}
      'edit-{{kebab_case entry_type.name}}': Edit{{pascal_case entry_type.name}},
      {{/if}}
      'mwc-snackbar': Snackbar,
      'display-error': DisplayError,
      'mwc-card': Card,
      'mwc-circular-progress': CircularProgress,
      'md-standard-icon-button': MdStandardIconButton,
      {{#uniq_lines}}
        {{#each entry_type.fields}}
          {{#if widget}}
      {{> (concat field_type.type "/" widget "/detail/scoped-elements") }}

          {{/if}}
        {{/each}}
      {{/uniq_lines}}
        
    };
  }
  
  static styles = [sharedStyles];
}
